{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "BananaPlus Programming Language",
	"patterns": [
		{
			"match": "//.*",
			"name": "comment.line.double-slash.bananaplus"
		},
		{
			"include": "#math"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#logic"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#vars"
		}
	],
	"repository": {
		"math": {
			"patterns": [
				{
					"name": "entity.other",
					"match": "(\\+|\\-|\\*|\\/|\\-\\=|\\+\\=|\\=)"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "([-0-9]+([0-9\\.]?))"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other",
					"match": "\\b(or|and|not)\\b"
				},
				{
					"name": "keyword.control",
					"match": "\\b(if|elif|else|while|for|step|to|switch|case|then|end|break|return|continue|default)\\b"
				},
				{
					"name": "keyword.other",
					"match": "\\b(list|obj|in|as)\\b"
				},
				{
					"name": "storage.type",
					"match": "\\b(func|import|let)\\b"
				},
				{
					"name": "storage.modifier",
					"match": "\\b(public|private)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.single",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape"
						}
					]	
				},
				{
					"name": "string.quoted.double",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape"
						}
					]
				}
			]
		},
		"logic": {
			"patterns": [
				{
					"name": "entity.name.type",
					"match": "(<|<=|!=|==|>=|>|=>)"
				},
				{
					"name": "constant.language",
					"match": "\\b(true|false|null)\\b"
				}
			]
		},
		"functions": {
			"begin": "([^\\s\\.]+?\\()",
			"end": "(?.\\))",
			"name": "entity.name.function"
		},
		"vars": {
			"patterns": [
				{
					"name": "entity.name.type",
					"match": "(?<=\\bas\\s)(\\w+)"
				},
				{
					"name": "entity.name.type",
					"match": "^[A-Z](([a-zA-Z]|[0-9])+)?"
				},
				{
					"name": "entity.name.type",
					"match": "(\\?|\\:)"
				},
				{
					"name": "variable.name",
					"match": "\\w+([^\\s\\.\\?\\:\\,]+)?"
				}
			]
		}
	},
	"scopeName": "source.bp"
}